Tropcomp affiche les fichiers dont le TLOC et le TCMP sont tous les deux dans le top n% parmi toutes les classes de test d'un projet.
En somme, tropcomp montre les fichiers qui ont le plus de lignes de code ET qui ont le plus grand ratio TLOC/ASSERT (ou bien TCMP).
Une valeur élevée de TCMP indique qu'un fichier contient trop de code pour peu de test.
Ces heuristiques peuvent être utiles mais il faut tout de même souligner le fait que certains tests nécessitent des contextes spécifiques.
En d'autres termes, un programme pourrait utiliser plusieurs lignes de code pour créer un contexte propice à certains tests.
On pourrait par exemple initialiser et remplir un array avant de tester notre code, ce qui créerait plusieurs lignes de code pour un seul test (ce qui est le cas pour les codes trouvés dans tropcomp10.csv).
Il faut aussi comprendre comment TLOC a été implémenté. 
Dépendamment des styles de mise en page du code de certains programmeurs, TLOC peut être arbitrairement grand.

Par exemple, le code : 

if(test_code == 0)
{
    System.out.println(test_code);
}
else
{
    System.out.println("nothing");
}

Est le même code que :

if(test_code == 0) System.out.println(test_code);
else System.out.println("nothing");

Le TLOC du premier code est 8, le TLOC du second code est 2, soit une différence de 4x.

À noter également que TCMP dépend de la stratégie de testing, et qu'un code simple peut exiger des tests multiples.

On peut ainsi déterminer que la corrélation entre TLOC/TCMP et complexité de code n'est pas très grande.
Tropcomp peut cependant trouver du code complexe / redondant, pour des valeurs TLOC et TCMP arbitrairement grandes et pourrait être utilisé
pour highlight certains fichiers susceptibles d'être complexes.
Il faudrait plus le voir comme un outil faisant partie d'un arsenal d'outil plutôt que comme seul prédicteur de complexité. 

Pour améliorer tropcomp, il faudrait rajouter d'autres métriques qui prendraient en compte des mesures comme :
- Couplage et cohésion, i.e le niveau de dépendance inter/intra-classes
- La profondeur du code, i.e le nombre de boucles/récursions
- La complexité NPath,i.e le nombre total de possibilités d'emprunter l'ensemble des chemins.
- etc...


